# -*- coding: utf-8 -*-
"""21016setumei.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zgKTCtBiD3344RhfPLd0gyEyIxFlHjDl
"""

import streamlit as st

# タイトル
st.title("2進数・10進数・16進数変換アプリ（計算過程表示付き）")

# 変換タイプの選択
conversion_type = st.radio(
    "変換タイプを選択してください:",
    ("10進数 → 2進数", "10進数 → 16進数", "2進数 → 10進数", "2進数 → 16進数", "16進数 → 10進数", "16進数 → 2進数")
)

# 入力フィールド
input_value = st.text_input("値を入力してください:")

# 変換ボタン
if st.button("変換"):
    try:
        if conversion_type == "10進数 → 2進数":
            decimal_value = int(input_value)
            result = bin(decimal_value)[2:]  # 10進数を2進数に変換
            explanation = f"{decimal_value} を 2 で割り、商と余りを繰り返し計算します。\n\n"
            temp = decimal_value
            steps = []
            while temp > 0:
                steps.append(f"{temp} ÷ 2 = {temp // 2} 余り {temp % 2}")
                temp //= 2
            explanation += "\n".join(steps[::-1])
            st.success(f"結果: {result}")
            st.text_area("計算過程", explanation)

        elif conversion_type == "10進数 → 16進数":
            decimal_value = int(input_value)
            result = hex(decimal_value)[2:].upper()  # 10進数を16進数に変換
            explanation = f"{decimal_value} を 16 で割り、商と余りを繰り返し計算します。\n\n"
            temp = decimal_value
            steps = []
            hex_map = "0123456789ABCDEF"
            while temp > 0:
                remainder = temp % 16
                steps.append(f"{temp} ÷ 16 = {temp // 16} 余り {hex_map[remainder]}")
                temp //= 16
            explanation += "\n".join(steps[::-1])
            st.success(f"結果: {result}")
            st.text_area("計算過程", explanation)

        elif conversion_type == "2進数 → 10進数":
            binary_value = input_value
            decimal_value = int(binary_value, 2)  # 2進数を10進数に変換
            explanation = f"2進数 {binary_value} を桁ごとに計算します。\n\n"
            explanation += " + ".join(
                [f"{int(bit)}×2^{len(binary_value) - i - 1}" for i, bit in enumerate(binary_value)]
            )
            explanation += f" = {decimal_value}"
            st.success(f"結果: {decimal_value}")
            st.text_area("計算過程", explanation)

        elif conversion_type == "2進数 → 16進数":
            binary_value = input_value
            decimal_value = int(binary_value, 2)  # まず2進数を10進数に変換
            result = hex(decimal_value)[2:].upper()  # その後10進数を16進数に変換
            explanation = f"2進数 {binary_value} を 10進数に変換 ({decimal_value}) し、\n"
            explanation += "その後、10進数を16進数に変換します。\n\n"
            temp = decimal_value
            steps = []
            hex_map = "0123456789ABCDEF"
            while temp > 0:
                remainder = temp % 16
                steps.append(f"{temp} ÷ 16 = {temp // 16} 余り {hex_map[remainder]}")
                temp //= 16
            explanation += "\n".join(steps[::-1])
            st.success(f"結果: {result}")
            st.text_area("計算過程", explanation)

        elif conversion_type == "16進数 → 10進数":
            hex_value = input_value.upper()
            decimal_value = int(hex_value, 16)  # 16進数を10進数に変換
            explanation = f"16進数 {hex_value} を桁ごとに計算します。\n\n"
            explanation += " + ".join(
                [f"{int('0x'+digit, 16)}×16^{len(hex_value) - i - 1}" for i, digit in enumerate(hex_value)]
            )
            explanation += f" = {decimal_value}"
            st.success(f"結果: {decimal_value}")
            st.text_area("計算過程", explanation)

        elif conversion_type == "16進数 → 2進数":
            hex_value = input_value.upper()
            decimal_value = int(hex_value, 16)  # 16進数を10進数に変換
            result = bin(decimal_value)[2:]  # 10進数を2進数に変換
            explanation = f"16進数 {hex_value} を 10進数に変換 ({decimal_value}) し、\n"
            explanation += "その後、10進数を2進数に変換します。\n\n"
            temp = decimal_value
            steps = []
            while temp > 0:
                steps.append(f"{temp} ÷ 2 = {temp // 2} 余り {temp % 2}")
                temp //= 2
            explanation += "\n".join(steps[::-1])
            st.success(f"結果: {result}")
            st.text_area("計算過程", explanation)

    except ValueError:
        st.error("正しい値を入力してください。")

